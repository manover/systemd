--- a/src/notify/notify.c
+++ b/src/notify/notify.c
@@ -40,6 +40,7 @@ static bool arg_ready = false;
 static pid_t arg_pid = 0;
 static const char *arg_status = NULL;
 static bool arg_booted = false;
+static unsigned arg_wait = 0;

 static void help(void) {
         printf("%s [OPTIONS...] [VARIABLE=VALUE...]\n\n"
@@ -49,7 +50,8 @@ static void help(void) {
                "     --ready           Inform the init system about service start-up completion\n"
                "     --pid[=PID]       Set main pid of daemon\n"
                "     --status=TEXT     Set status text\n"
-               "     --booted          Check if the system was booted up with systemd\n",
+               "     --booted          Check if the system was booted up with systemd\n"
+               "     --wait[=SEC]      Sleep after sending the message to avoid the race condition (1 second default)\n",
                program_invocation_short_name);
 }

@@ -61,6 +63,7 @@ static int parse_argv(int argc, char *ar
                 ARG_PID,
                 ARG_STATUS,
                 ARG_BOOTED,
+                ARG_WAIT,
         };

         static const struct option options[] = {
@@ -70,6 +73,7 @@ static int parse_argv(int argc, char *ar
                 { "pid",       optional_argument, NULL, ARG_PID       },
                 { "status",    required_argument, NULL, ARG_STATUS    },
                 { "booted",    no_argument,       NULL, ARG_BOOTED    },
+                { "wait",      optional_argument, NULL, ARG_WAIT      },
                 {}
         };

@@ -113,6 +117,19 @@ static int parse_argv(int argc, char *ar
                         arg_booted = true;
                         break;

+                case ARG_WAIT:
+                        if (optarg) {
+                            if (safe_atou(optarg, &arg_wait) < 0) {
+                                log_error("Failed to parse wait parameter %s.", optarg);
+                                return -EINVAL;
+                            } else if (arg_wait < 1 || arg_wait > 60) {
+								log_error("wait parameter must be integer in range 1..60 seconds, got %u.", arg_wait);
+								return -EINVAL;
+							}
+                        } else
+                            arg_wait = 1;
+						break;
+
                 case '?':
                         return -EINVAL;

@@ -198,8 +215,12 @@ int main(int argc, char* argv[]) {
         } else if (r == 0) {
                 log_error("No status data could be sent: $NOTIFY_SOCKET was not set");
                 r = -EOPNOTSUPP;
+                goto finish;
         }

+		if (arg_wait > 0)
+                sleep(arg_wait);
+
 finish:
         return r < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
 }
