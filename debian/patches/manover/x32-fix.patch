--- a/src/basic/format-util.h
+++ b/src/basic/format-util.h
@@ -21,6 +21,14 @@
 
 #include <inttypes.h>
 
+#ifdef __ILP32__
+#  define SYS_LONG "lld"
+#  define SYS_LONG_I "lli"
+# else
+#  define SYS_LONG "ld"
+#  define SYS_LONG_I "li"
+#endif
+
 #if SIZEOF_PID_T == 4
 #  define PID_PRI PRIi32
 #elif SIZEOF_PID_T == 2
--- a/src/journal/journald-console.c
+++ b/src/journal/journald-console.c
@@ -72,7 +72,7 @@ void server_forward_console(
         /* First: timestamp */
         if (prefix_timestamp()) {
                 assert_se(clock_gettime(CLOCK_MONOTONIC, &ts) == 0);
-                xsprintf(tbuf, "[%5"PRI_TIME".%06ld] ",
+                xsprintf(tbuf, "[%5"PRI_TIME".%06"SYS_LONG"] ",
                          ts.tv_sec,
                          ts.tv_nsec / 1000);
                 IOVEC_SET_STRING(iovec[n++], tbuf);
--- a/src/timesync/timesyncd-manager.c
+++ b/src/timesync/timesyncd-manager.c
@@ -47,6 +47,7 @@
 #include "timesyncd-conf.h"
 #include "timesyncd-manager.h"
 #include "util.h"
+#include "format-util.h"
 
 #ifndef ADJ_SETOFFSET
 #define ADJ_SETOFFSET                   0x0100  /* add 'time' to current time */
@@ -378,10 +379,10 @@ static int manager_adjust_clock(Manager
         m->drift_ppm = tmx.freq / 65536;
 
         log_debug("  status       : %04i %s\n"
-                  "  time now     : %li.%03"PRI_USEC"\n"
-                  "  constant     : %li\n"
+                  "  time now     : %"PRI_TIME".%03"PRI_USEC"\n"
+                  "  constant     : %"SYS_LONG_I"\n"
                   "  offset       : %+.3f sec\n"
-                  "  freq offset  : %+li (%i ppm)\n",
+                  "  freq offset  : %+"SYS_LONG_I" (%i ppm)\n",
                   tmx.status, tmx.status & STA_UNSYNC ? "unsync" : "sync",
                   tmx.time.tv_sec, tmx.time.tv_usec / NSEC_PER_MSEC,
                   tmx.constant,
--- a/src/udev/udevadm-monitor.c
+++ b/src/udev/udevadm-monitor.c
@@ -41,7 +41,7 @@ static void print_device(struct udev_dev
         struct timespec ts;
 
         assert_se(clock_gettime(CLOCK_MONOTONIC, &ts) == 0);
-        printf("%-6s[%"PRI_TIME".%06ld] %-8s %s (%s)\n",
+        printf("%-6s[%"PRI_TIME".%06"SYS_LONG"] %-8s %s (%s)\n",
                source,
                ts.tv_sec, ts.tv_nsec/1000,
                udev_device_get_action(device),
